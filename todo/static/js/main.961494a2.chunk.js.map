{"version":3,"sources":["App.js","reportWebVitals.js","todo/TodoApp.jsx","todo/input.jsx","index.js"],"names":["Todo","todo","index","completeTodo","removeTodo","className","style","textDecoration","isCompleted","text","onClick","TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","type","onChange","target","App","todos","setTodos","newTodos","filter","c","i","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","this","props","onComplete","onRemove","Component","state","input","handleChange","setState","handleSubmit","querySelector","action","Item","name","price","AppForm","addItem","setName","setPrice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.961494a2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\n// const Todo = ({ todo, index, completeTodo, removeTodo }) => {\n//     return (\n//         <div\n//             className=\"todo\"\n//             style={{\n//                 textDecoration: todo.isCompleted === true ? 'line-through' : '',\n//             }}\n//         >\n//             {todo.text}\n//             <div>\n//                 <button onClick={() => completeTodo(index)}>Complete</button>\n//                 <button onClick={() => removeTodo(index)}>Remove</button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// const TodoForm = ({ addTodo }) => {\n//     const [value, setValue] = React.useState('');\n\n//     const handleSubmit = e => {\n//         e.preventDefault();\n//         if (!value) return;\n//         addTodo(value);\n//         setValue('');\n//     };\n\n//     return (\n//         <form onSubmit={handleSubmit}>\n//             <input\n//                 type=\"text\"\n//                 value={value}\n//                 onChange={e => setValue(e.target.value)}\n//             />\n//             <button type=\"submit\">Add Item</button>\n//         </form>\n//     );\n// };\n\n// const App = () => {\n//     const [todos, setTodos] = React.useState([\n//         {\n//             text: 'Learn React fundamentals',\n//             isCompleted: false,\n//         },\n//         {\n//             text: 'Drink Water',\n//             isCompleted: false,\n//         },\n//         {\n//             text: 'Relaxing with Music',\n//             isCompleted: false,\n//         },\n//     ]);\n\n//     const addTodo = text => {\n//         const newTodos = [...todos, { text }];\n//         setTodos(newTodos);\n//     };\n\n//     const completeTodo = index => {\n//         const newTodos = [...todos];\n//         newTodos[index].isCompleted = true;\n//         setTodos(newTodos);\n//     };\n\n//     const removeTodo = index => {\n//         const newTodos = [...todos];\n//         newTodos.splice(index, 1);\n//         setTodos(newTodos);\n//     };\n\n//     return (\n//         <div className=\"app\">\n//             <div className=\"todo-list\">\n//                 {todos.map((todo, index) => (\n//                     <Todo\n//                         todo={todo}\n//                         key={index}\n//                         index={index}\n//                         completeTodo={completeTodo}\n//                         removeTodo={removeTodo}\n//                     />\n//                 ))}\n//                 <TodoForm addTodo={addTodo} />\n//             </div>\n//         </div>\n//     );\n// };\n\nfunction Todo({ todo, index, completeTodo, removeTodo }) {\n    return (\n        <div\n            className=\"todo\"\n            style={{\n                textDecoration: todo.isCompleted === true ? 'line-through' : '',\n            }}\n        >\n            {todo.text}\n            <div>\n                <button onClick={() => completeTodo(index)}>Complete</button>\n                <button onClick={() => removeTodo(index)}>Remove</button>\n            </div>\n        </div>\n    );\n}\n\nfunction TodoForm({ addTodo }) {\n    const [value, setValue] = useState('');\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if (!value) return;\n        addTodo(value);\n        setValue('');\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={value}\n                onChange={e => setValue(e.target.value)}\n            ></input>\n            <button type=\"submit\">Add Todo</button>\n        </form>\n    );\n}\n\nfunction App() {\n    const [todos, setTodos] = useState([\n        { text: 'Learn React fundamentals', isCompleted: false },\n        { text: 'Drinking Water', isCompleted: false },\n        { text: 'Relaxing With Music', isCompleted: false },\n    ]);\n\n    const addTodo = text => {\n        const newTodos = [...todos, { text }];\n        setTodos(newTodos);\n    };\n\n    const completeTodo = index => {\n        const newTodos = [...todos];\n        newTodos[index].isCompleted = !newTodos[index].isCompleted;\n        setTodos(newTodos);\n    };\n\n    const removeTodo = index => {\n        const newTodos = todos.filter((c, i) => i !== index);\n        setTodos(newTodos);\n    };\n\n    return (\n        <div className=\"app\">\n            <div className=\"todo-list\">\n                {todos.map((todo, index) => (\n                    <Todo\n                        todo={todo}\n                        key={index}\n                        index={index}\n                        completeTodo={completeTodo}\n                        removeTodo={removeTodo}\n                    />\n                ))}\n                <TodoForm addTodo={addTodo} />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\n//Todo App with Class Component\r\n\r\nclass Todo extends Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"todo\"\r\n                style={{\r\n                    textDecoration:\r\n                        this.props.todo.isCompleted == true\r\n                            ? 'line-through'\r\n                            : '',\r\n                }}\r\n            >\r\n                {this.props.todo.text}\r\n                <div>\r\n                    <button\r\n                        onClick={() => this.props.onComplete(this.props.index)}\r\n                    >\r\n                        Complete\r\n                    </button>\r\n                    <button\r\n                        className=\"remove\"\r\n                        onClick={() => this.props.onRemove(this.props.index)}\r\n                    >\r\n                        Remove\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass TodoForm extends Component {\r\n    state = {\r\n        input: '',\r\n    };\r\n\r\n    handleChange = e => {\r\n        const value = e.target.value;\r\n        this.setState({ input: value });\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        const text = e.target.querySelector('input[type=\"text\"]').value;\r\n        if (text) {\r\n            this.props.addTodo(text);\r\n            this.setState({ input: '' });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <form action=\"#\" onSubmit={this.handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={this.state.input}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <button type=\"submit\">Add Todo</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nclass AppTodo extends Component {\r\n    state = {\r\n        TodoTexts: [\r\n            { text: 'Learn React', isCompleted: false },\r\n            { text: 'Drink Water', isCompleted: false },\r\n            { text: 'Relax with Music', isCompleted: false },\r\n        ],\r\n    };\r\n\r\n    completeTodo = index => {\r\n        const newTodos = [...this.state.TodoTexts];\r\n        newTodos[index].isCompleted = !newTodos[index].isCompleted;\r\n        this.setState({ TodoTexts: newTodos });\r\n    };\r\n\r\n    handleRemove = index => {\r\n        const newTodos = [...this.state.TodoTexts];\r\n        if (newTodos[index].isCompleted === true) {\r\n            newTodos.splice(index, 1);\r\n        }\r\n        this.setState({ TodoTexts: newTodos });\r\n    };\r\n\r\n    addTodo = value => {\r\n        this.setState({\r\n            TodoTexts: [...this.state.TodoTexts, { text: value }],\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app\">\r\n                <div className=\"todo-list\">\r\n                    {this.state.TodoTexts.map((todo, index) => (\r\n                        <Todo\r\n                            todo={todo}\r\n                            key={index}\r\n                            index={index}\r\n                            onComplete={this.completeTodo}\r\n                            onRemove={this.handleRemove}\r\n                        />\r\n                    ))}\r\n                    <TodoForm addTodo={this.addTodo} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppTodo;\r\n","import React, { Component, useState } from 'react';\r\n\r\nclass Item extends Component {\r\n    render() {\r\n        return (\r\n            <li>\r\n                {this.props.name}, ${this.props.price}\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nfunction AppForm({ addItem }) {\r\n    const [name, setName] = useState('');\r\n    const [price, setPrice] = useState('');\r\n\r\n    const add = () => {\r\n        addItem(name, price);\r\n        setName('');\r\n        setPrice('');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                type=\"text\"\r\n                value={name}\r\n                onChange={e => setName(e.target.value)}\r\n            />\r\n            <input\r\n                type=\"text\"\r\n                value={price}\r\n                onChange={e => setPrice(e.target.value)}\r\n            />\r\n            <button onClick={add}>Add</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass AppRef extends Component {\r\n    state = {\r\n        items: [\r\n            { id: 1, name: 'Apple', price: 0.54 },\r\n            { id: 2, name: 'Orange', price: 0.67 },\r\n        ],\r\n    };\r\n\r\n    add = (name, price) => {\r\n        const id = this.state.items.length + 1;\r\n        this.setState({\r\n            items: [...this.state.items, { id, name, price }],\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Hello React</h1>\r\n                <ul>\r\n                    {this.state.items.map(i => (\r\n                        <Item name={i.name} price={i.price} key={i.id} />\r\n                    ))}\r\n                </ul>\r\n                <AppForm addItem={this.add} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppRef;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport AppTodo from './todo/TodoApp';\nimport AppRef from './todo/input';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}